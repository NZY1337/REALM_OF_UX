{"ast":null,"code":"import { TYPES } from \"./constants\";\nexport var trimUserName = function trimUserName(name) {\n  //   const firstName = name.split(\" \")[0];\n  //   const secondName = name.split(\" \")[1].split(\"\")[0];\n  //   return `Hello, ${firstName} ${secondName}.`;\n  return name;\n};\nexport var getBannerSizes = function getBannerSizes() {\n  return {\n    fbCover: {\n      width: 1000,\n      height: 800\n    },\n    fbPost: {\n      width: 900,\n      height: 600\n    },\n    instaCover: {\n      width: 500,\n      height: 400\n    },\n    instaPost: {\n      width: 800,\n      height: 600\n    }\n  };\n}; // get the banner's name based on the banner's size\n\nexport var getBannerType = function getBannerType(actualSize) {\n  var sizes = getBannerSizes();\n  var actualType = \"\";\n\n  for (var size in sizes) {\n    if (sizes[size].width === actualSize) {\n      actualType = size;\n    }\n  }\n\n  return TYPES.find(function (type) {\n    return type.id === actualType;\n  });\n};\nexport var addStyleBasedType = function addStyleBasedType() {\n  return {\n    heading: {\n      fontSize: 40,\n      fontWeight: \"bold\",\n      color: \"#fff\"\n    },\n    subheading: {\n      fontSize: 20,\n      color: \"#fff\"\n    },\n    paragraph: {\n      fontWeight: \"100\",\n      color: \"#fff\"\n    }\n  };\n};\nexport var convertToBase64 = function convertToBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n\n    fileReader.onload = function () {\n      return resolve(fileReader.result);\n    };\n\n    fileReader.onerror = function (error) {\n      return reject(error);\n    };\n  });\n};\nexport var backgroundImagePost = function backgroundImagePost(path) {\n  return {\n    backgroundImage: \"linear-gradient(rgba(26, 11, 11, 0), rgb(91 47 124 / 42%)), url(\".concat(path, \")\"),\n    fontSize: \"2rem\"\n  };\n};","map":{"version":3,"names":["TYPES","trimUserName","name","getBannerSizes","fbCover","width","height","fbPost","instaCover","instaPost","getBannerType","actualSize","sizes","actualType","size","find","type","id","addStyleBasedType","heading","fontSize","fontWeight","color","subheading","paragraph","convertToBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error","backgroundImagePost","path","backgroundImage"],"sources":["/Users/andrei.mocanu/projects/realm-of-ux/client/src/utils/helpers/index.js"],"sourcesContent":["import { TYPES } from \"./constants\";\n\nexport const trimUserName = (name) => {\n  //   const firstName = name.split(\" \")[0];\n  //   const secondName = name.split(\" \")[1].split(\"\")[0];\n  //   return `Hello, ${firstName} ${secondName}.`;\n  return name;\n};\n\nexport const getBannerSizes = () => {\n  return {\n    fbCover: {\n      width: 1000,\n      height: 800,\n    },\n    fbPost: {\n      width: 900,\n      height: 600,\n    },\n    instaCover: {\n      width: 500,\n      height: 400,\n    },\n    instaPost: {\n      width: 800,\n      height: 600,\n    },\n  };\n};\n\n// get the banner's name based on the banner's size\nexport const getBannerType = (actualSize) => {\n  const sizes = getBannerSizes();\n  let actualType = \"\";\n\n  for (let size in sizes) {\n    if (sizes[size].width === actualSize) {\n      actualType = size;\n    }\n  }\n\n  return TYPES.find((type) => type.id === actualType);\n};\n\nexport const addStyleBasedType = () => {\n  return {\n    heading: {\n      fontSize: 40,\n      fontWeight: \"bold\",\n      color: \"#fff\",\n    },\n\n    subheading: {\n      fontSize: 20,\n      color: \"#fff\",\n    },\n\n    paragraph: {\n      fontWeight: \"100\",\n      color: \"#fff\",\n    },\n  };\n};\n\nexport const convertToBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(file);\n    fileReader.onload = () => resolve(fileReader.result);\n    fileReader.onerror = (error) => reject(error);\n  });\n};\n\nexport const backgroundImagePost = (path) => {\n  return {\n    backgroundImage: `linear-gradient(rgba(26, 11, 11, 0), rgb(91 47 124 / 42%)), url(${path})`,\n    fontSize: \"2rem\",\n  };\n};\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;EACpC;EACA;EACA;EACA,OAAOA,IAAP;AACD,CALM;AAOP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAClC,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAE,IADA;MAEPC,MAAM,EAAE;IAFD,CADJ;IAKLC,MAAM,EAAE;MACNF,KAAK,EAAE,GADD;MAENC,MAAM,EAAE;IAFF,CALH;IASLE,UAAU,EAAE;MACVH,KAAK,EAAE,GADG;MAEVC,MAAM,EAAE;IAFE,CATP;IAaLG,SAAS,EAAE;MACTJ,KAAK,EAAE,GADE;MAETC,MAAM,EAAE;IAFC;EAbN,CAAP;AAkBD,CAnBM,C,CAqBP;;AACA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAgB;EAC3C,IAAMC,KAAK,GAAGT,cAAc,EAA5B;EACA,IAAIU,UAAU,GAAG,EAAjB;;EAEA,KAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;IACtB,IAAIA,KAAK,CAACE,IAAD,CAAL,CAAYT,KAAZ,KAAsBM,UAA1B,EAAsC;MACpCE,UAAU,GAAGC,IAAb;IACD;EACF;;EAED,OAAOd,KAAK,CAACe,IAAN,CAAW,UAACC,IAAD;IAAA,OAAUA,IAAI,CAACC,EAAL,KAAYJ,UAAtB;EAAA,CAAX,CAAP;AACD,CAXM;AAaP,OAAO,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;EACrC,OAAO;IACLC,OAAO,EAAE;MACPC,QAAQ,EAAE,EADH;MAEPC,UAAU,EAAE,MAFL;MAGPC,KAAK,EAAE;IAHA,CADJ;IAOLC,UAAU,EAAE;MACVH,QAAQ,EAAE,EADA;MAEVE,KAAK,EAAE;IAFG,CAPP;IAYLE,SAAS,EAAE;MACTH,UAAU,EAAE,KADH;MAETC,KAAK,EAAE;IAFE;EAZN,CAAP;AAiBD,CAlBM;AAoBP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;EACvC,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtC,IAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;IACAD,UAAU,CAACE,aAAX,CAAyBN,IAAzB;;IACAI,UAAU,CAACG,MAAX,GAAoB;MAAA,OAAML,OAAO,CAACE,UAAU,CAACI,MAAZ,CAAb;IAAA,CAApB;;IACAJ,UAAU,CAACK,OAAX,GAAqB,UAACC,KAAD;MAAA,OAAWP,MAAM,CAACO,KAAD,CAAjB;IAAA,CAArB;EACD,CALM,CAAP;AAMD,CAPM;AASP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;EAC3C,OAAO;IACLC,eAAe,4EAAqED,IAArE,MADV;IAELlB,QAAQ,EAAE;EAFL,CAAP;AAID,CALM"},"metadata":{},"sourceType":"module"}