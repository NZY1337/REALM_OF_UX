{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { TYPES } from \"./constants\";\nexport var trimUserName = function trimUserName(name) {\n  var firstName = name.split(\" \")[0];\n  var secondName = name.split(\" \")[1].split(\"\")[0];\n  return \"Hello, \".concat(firstName, \" \").concat(secondName, \".\");\n};\nexport var getBannerSizes = function getBannerSizes() {\n  return {\n    fbCover: {\n      width: 1000,\n      height: 800\n    },\n    fbPost: {\n      width: 900,\n      height: 600\n    },\n    instaCover: {\n      width: 500,\n      height: 400\n    },\n    instaPost: {\n      width: 800,\n      height: 600\n    }\n  };\n};\nexport var getBannerType = function getBannerType(type) {\n  var sizes = getBannerSizes();\n  var actualType = \"\";\n\n  var _iterator = _createForOfIteratorHelper(sizes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var size = _step.value;\n      console.log(size);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nexport var addStyleBasedType = function addStyleBasedType() {\n  return {\n    heading: {\n      fontSize: \"40px\",\n      fontWeight: \"bold\",\n      color: \"#fff\"\n    },\n    subheading: {\n      fontSize: \"20px\",\n      color: \"#fff\"\n    },\n    paragraph: {\n      fontWeight: \"100\",\n      color: \"#fff\"\n    }\n  };\n};","map":{"version":3,"names":["TYPES","trimUserName","name","firstName","split","secondName","getBannerSizes","fbCover","width","height","fbPost","instaCover","instaPost","getBannerType","type","sizes","actualType","size","console","log","addStyleBasedType","heading","fontSize","fontWeight","color","subheading","paragraph"],"sources":["/Users/andrei.mocanu/projects/realm-of-ux/client/src/utils/helpers/index.js"],"sourcesContent":["import { TYPES } from \"./constants\";\n\nexport const trimUserName = (name) => {\n  const firstName = name.split(\" \")[0];\n  const secondName = name.split(\" \")[1].split(\"\")[0];\n  return `Hello, ${firstName} ${secondName}.`;\n};\n\nexport const getBannerSizes = () => {\n  return {\n    fbCover: {\n      width: 1000,\n      height: 800,\n    },\n    fbPost: {\n      width: 900,\n      height: 600,\n    },\n    instaCover: {\n      width: 500,\n      height: 400,\n    },\n    instaPost: {\n      width: 800,\n      height: 600,\n    },\n  };\n};\n\nexport const getBannerType = (type) => {\n  const sizes = getBannerSizes();\n  let actualType = \"\";\n\n  for (let size of sizes) {\n    console.log(size);\n  }\n};\n\nexport const addStyleBasedType = () => {\n  return {\n    heading: {\n      fontSize: \"40px\",\n      fontWeight: \"bold\",\n      color: \"#fff\",\n    },\n\n    subheading: {\n      fontSize: \"20px\",\n      color: \"#fff\",\n    },\n\n    paragraph: {\n      fontWeight: \"100\",\n      color: \"#fff\",\n    },\n  };\n};\n"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,aAAtB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;EACpC,IAAMC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAlB;EACA,IAAMC,UAAU,GAAGH,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,EAAzB,EAA6B,CAA7B,CAAnB;EACA,wBAAiBD,SAAjB,cAA8BE,UAA9B;AACD,CAJM;AAMP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAClC,OAAO;IACLC,OAAO,EAAE;MACPC,KAAK,EAAE,IADA;MAEPC,MAAM,EAAE;IAFD,CADJ;IAKLC,MAAM,EAAE;MACNF,KAAK,EAAE,GADD;MAENC,MAAM,EAAE;IAFF,CALH;IASLE,UAAU,EAAE;MACVH,KAAK,EAAE,GADG;MAEVC,MAAM,EAAE;IAFE,CATP;IAaLG,SAAS,EAAE;MACTJ,KAAK,EAAE,GADE;MAETC,MAAM,EAAE;IAFC;EAbN,CAAP;AAkBD,CAnBM;AAqBP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;EACrC,IAAMC,KAAK,GAAGT,cAAc,EAA5B;EACA,IAAIU,UAAU,GAAG,EAAjB;;EAFqC,2CAIpBD,KAJoB;EAAA;;EAAA;IAIrC,oDAAwB;MAAA,IAAfE,IAAe;MACtBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACD;EANoC;IAAA;EAAA;IAAA;EAAA;AAOtC,CAPM;AASP,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;EACrC,OAAO;IACLC,OAAO,EAAE;MACPC,QAAQ,EAAE,MADH;MAEPC,UAAU,EAAE,MAFL;MAGPC,KAAK,EAAE;IAHA,CADJ;IAOLC,UAAU,EAAE;MACVH,QAAQ,EAAE,MADA;MAEVE,KAAK,EAAE;IAFG,CAPP;IAYLE,SAAS,EAAE;MACTH,UAAU,EAAE,KADH;MAETC,KAAK,EAAE;IAFE;EAZN,CAAP;AAiBD,CAlBM"},"metadata":{},"sourceType":"module"}