{"ast":null,"code":"import { useEffect } from \"react\"; // Hook\n\nvar useOnClickOutside = function useOnClickOutside(ref, handler) {\n  useEffect(function () {\n    var listener = function listener(event) {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return function () {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\n\nexport default useOnClickOutside;","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["/Users/andrei.mocanu/projects/realm-of-ux/client/src/utils/hooks/useClickOutside.jsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n// Hook\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = (event) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n        handler(event);\n      };\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n};\n\nexport default useOnClickOutside;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CAEA;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,OAAN,EAAkB;EAC1CH,SAAS,CACP,YAAM;IACJ,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;MAC1B;MACA,IAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;QACtD;MACD;;MACDL,OAAO,CAACE,KAAD,CAAP;IACD,CAND;;IAOAI,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;IACAK,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;IACA,OAAO,YAAM;MACXK,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;MACAK,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;IACD,CAHD;EAID,CAfM,EAgBP;EACA;EACA;EACA;EACA;EACA;EACA,CAACF,GAAD,EAAMC,OAAN,CAtBO,CAAT;AAwBD,CAzBD;;AA2BA,eAAeF,iBAAf"},"metadata":{},"sourceType":"module"}